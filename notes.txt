1- The manifest : The extension's manifest is the only required file that must have a specific file name: manifest.json .
                 It also has to be located in the extension's root directory. The manifest records important metadata, defines resources,
                  declares permissions, and identifies which files to run in the background and on the page.
2- The service worker : The extension service worker handles and listens for browser events. There are many types of events, such as navigating to
                     a new page, removing a bookmark, or closing a tab. It can use all the Chrome APIs, but it cannot interact directly with the 
                     content of web pages; thatâ€™s the job of content scripts.
3- Content scripts : Content scripts execute Javascript in the context of a web page. They can also read and modify the DOM of the pages they're
                     injected into. Content Scripts can only use a subset of the Chrome APIs but can indirectly access the rest by exchanging messages
                     with the extension service worker.
4- The popup and other pages : An extension can include various HTML files, such as a popup, an options page, and other HTML pages. All these pages have access 
                                to Chrome APIs.



5- Chrome API : The "Chrome API" refers to the set of Application Programming Interfaces (APIs) provided by the Google Chrome web browser. These APIs allow developers to interact with and extend the functionality of the Chrome browser. Developers can use these APIs to create Chrome extensions, web applications, and browser-related tools.

    The Chrome API provides access to various aspects of the browser, including:

    1. **Browser Features:** Developers can use the Chrome API to access and control browser features such as tabs, windows, bookmarks, history, and downloads. This allows them to create extensions that modify or enhance the browser's behavior and user interface.

    2. **Web Navigation:** The API allows developers to monitor and interact with web page navigation events, including loading, unloading, and error handling. This is useful for creating extensions that customize or manipulate web content.

    3. **Storage:** Chrome API offers local and synchronized storage options for saving user data within the browser. This is often used in the development of browser extensions to store settings and user preferences.

    4. **Messaging and Communication:** Extensions can use the Chrome API to communicate with background scripts, content scripts, and other parts of the extension. This enables different components of an extension to work together and share information.

    5. **User Interface Elements:** The API provides ways to create user interface elements, such as browser action buttons, context menus, and pop-up windows for extensions, allowing developers to interact with users in various ways.

    6. **Permissions and Security:** The Chrome API includes features for requesting and handling permissions, which are essential for ensuring the security and privacy of user data and actions in the browser.

    7. **Networking:** Developers can use the API to send HTTP requests and manage network traffic, which is useful for interacting with web services and retrieving data from the internet.

    Chrome API is primarily used in the development of Chrome extensions, which are small software applications that enhance the functionality of the Chrome browser. These extensions can be installed from the Chrome Web Store and are written using HTML, CSS, and JavaScript,\
    with the ability to interact with the Chrome API to provide additional features and capabilities within the browser. This API is well-documented and provides developers with the tools they need to create a wide range of extensions and web applications that integrate with the Chrome browser.


6 - Z-index : it is used to resolve overlapping conflicts in css. if two elements overlap the one with the higher z-index would be sitting on top of the one with a lower z-index.




